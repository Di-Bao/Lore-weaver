// SillyTavern Lore Weaver Extension
// Author: Assistant (via User Request)
// Version: 1.0.0

import {
    getContext,
    getApiUrl,
    extension_settings,
    saveSettings,
    setExtensionSettings,
} from '../../../../extensions.js';
import {
    saveLorebook,
    loadLorebooks,
} from '../../../../lorebooks.js';

import {
    extensionName,
    extensionFolderPath,
} from './script_consts.js';

import {
    log,
    warn,
    error,
    getSettings,
    setSettings,
    callApi,
    displayStatus,
} from './script_utils.js';


const DEFAULT_SETTINGS = {
    loadBeforeSend: false,
};

// ===================================================================================
//
// SERVER-SIDE LOGIC (Node.js)
//
// ===================================================================================
// This part of the script is executed by the Node.js server when SillyTavern starts.
if (typeof process !== 'undefined') {
    const fs = await import('fs/promises');
    const path = await import('path');
    const { getLorebook, createLorebook } = await import(
        '../../../../lorebooks.js'
    );

    const CONFIG_FOLDER_PATH = path.join(
        extensionFolderPath,
        'configs'
    );

    /**
     * The core function that reads configs and updates lorebooks.
     */
    async function processLoreWeaverConfigs() {
        log('Starting Lore Weaver processing...');
        try {
            await fs.mkdir(CONFIG_FOLDER_PATH, { recursive: true });
            const configFiles = (await fs.readdir(CONFIG_FOLDER_PATH)).filter(f => f.endsWith('.json'));

            if (configFiles.length === 0) {
                warn('No config files found in extensions/lore-weaver/configs/');
                return { success: true, message: 'No configs found.' };
            }

            for (const configFile of configFiles) {
                const configPath = path.join(CONFIG_FOLDER_PATH, configFile);
                const config = JSON.parse(await fs.readFile(configPath, 'utf8'));
                log(`Processing config: ${configFile}`);

                // 1. Validate Config
                if (!config.project_folder || !config.lorebook_name || !config.folders_to_load) {
                    throw new Error(`Invalid config format in ${configFile}`);
                }

                const projectRoot = path.resolve(config.project_folder);
                log(`Project root resolved to: ${projectRoot}`);

                // 2. Get or create the lorebook
                let lorebook = getLorebook(config.lorebook_name);
                if (!lorebook) {
                    log(`Lorebook "${config.lorebook_name}" not found. Creating it.`);
                    lorebook = createLorebook(config.lorebook_name);
                    lorebook.description = `Generated by Lore Weaver from ${configFile}`;
                }

                // 3. Process each source folder
                for (const folder of config.folders_to_load) {
                    const sourceFolderPath = path.join(projectRoot, folder.name);

                    try {
                        const loreFiles = (await fs.readdir(sourceFolderPath)).filter(f => f.endsWith('.txt'));

                        for (const loreFile of loreFiles) {
                            const key = path.basename(loreFile, '.txt');
                            const content = await fs.readFile(path.join(sourceFolderPath, loreFile), 'utf8');

                            const existingEntryIndex = lorebook.entries.findIndex(e => e.key.includes(key));

                            const newEntryData = {
                                key: [key],
                                content: content.trim(),
                                // Default entry settings - can be overridden by config
                                constant: false,
                                selective: true,
                                insertion_order: 100,
                                enabled: true,
                                case_sensitive: false,
                                secondary_keys: [],
                                ...folder.entry_config, // User-defined overrides
                            };

                            if (existingEntryIndex !== -1) {
                                // Update existing entry
                                lorebook.entries[existingEntryIndex] = {
                                    ...lorebook.entries[existingEntryIndex],
                                    ...newEntryData,
                                };
                            } else {
                                // Add new entry
                                lorebook.entries.push(newEntryData);
                            }
                        }
                    } catch (err) {
                        warn(`Could not read folder "${sourceFolderPath}". Does it exist? Error: ${err.message}`);
                    }
                }
                // 4. Save the modified lorebook
                await saveLorebook(lorebook.name, lorebook);
            }

            // Tell the whole system to reload lorebooks from disk
            await loadLorebooks();
            const message = `Successfully processed ${configFiles.length} config(s).`;
            log(message);
            return { success: true, message: message };

        } catch (err) {
            error('Error processing Lore Weaver configs:', err);
            return { success: false, message: err.message };
        }
    }


    // Create API endpoint for the manual load button
    const KobaRouter = (await import('../../../../api/router.js')).KobaRouter;
    const router = new KobaRouter();

    router.post('/lore-weaver/load', async (req, res) => {
        const result = await processLoreWeaverConfigs();
        res.status(result.success ? 200 : 500).send(result);
    });

    // Hook into the generation process
    SillyTavern.app.use('/api/extensions/lore-weaver', router);
    SillyTavern.on('beforeHandleRequest', async (req, res) => {
        const settings = extension_settings[extensionName] ?? DEFAULT_SETTINGS;
        if (settings.loadBeforeSend && req.path === '/api/generate') {
            log('Lore Weaver: "Load Before Send" is active, processing...');
            await processLoreWeaverConfigs();
        }
    });
}


// ===================================================================================
//
// CLIENT-SIDE LOGIC (Browser)
//
// ===================================================================================
// This part of the script is executed by the user's browser.
(function () {
    // Make sure we are in the browser
    if (typeof process !== 'undefined') {
        return;
    }

    /**
     * Saves the current settings to the server.
     */
    async function savePluginSettings() {
        extension_settings[extensionName] = getSettings();
        await saveSettings();
    }

    /**
     * Handles the manual load button click.
     */
    async function onManualLoadClick() {
        displayStatus('Loading...', 'loading');
        try {
            const response = await callApi('/load', 'POST');
            if (response.ok) {
                const result = await response.json();
                displayStatus(result.message, 'success');
                // A small reminder for the user
                toastr.info("Lorebooks reloaded. You may need to click the refresh button in the Lorebook panel to see changes in the UI.");
            } else {
                const error = await response.json();
                throw new Error(error.message || 'Unknown error');
            }
        } catch (err) {
            error('Manual load failed:', err);
            displayStatus(`Error: ${err.message}`, 'error');
        }
    }

    /**
     * Load settings and initialize the UI.
     */
    function onSettingsChange() {
        const settings = getSettings();
        $('#lore-weaver-before-send').prop('checked', settings.loadBeforeSend).trigger('change');
    }

    /**
     * Creates and injects the extension's UI.
     */
    function addExtensionUI() {
        const settingsHtml = `
            <div class="lore-weaver-settings">
                <h3>Lore Weaver</h3>
                <p>Loads lorebook entries from local text files based on JSON configurations.</p>
                <div class="inline-drawer">
                    <div class="inline-drawer-toggle inline-drawer-header">
                        <span>How to Use</span>
                    </div>
                    <div class="inline-drawer-content">
                        <ol>
                            <li>Create a <code>.json</code> config file inside <code>extensions/lore-weaver/configs/</code>.</li>
                            <li>Point the <code>project_folder</code> in the JSON to your root lore directory.</li>
                            <li>Define which subfolders to load and their default entry settings.</li>
                            <li>Place your lore as <code>.txt</code> files inside those subfolders (filename = lorebook key).</li>
                            <li>Click "Manual Load" to import everything.</li>
                        </ol>
                        <p><strong>Warning:</strong> "Load Before Send" can slow down message generation, as it reads from your disk every time.</p>
                    </div>
                </div>
                <div class="buttons">
                    <button id="lore-weaver-manual-load" class="menu_button">
                        <i class="fa-solid fa-sync"></i> Manual Load
                    </button>
                </div>
                <div class="checkbox_item">
                    <input id="lore-weaver-before-send" type="checkbox">
                    <label for="lore-weaver-before-send">
                        Load Before Send (Hot-Reload on Generate)
                    </label>
                </div>
                <div id="lore-weaver-status"></div>
            </div>
        `;

        $('#extensions_settings').append(settingsHtml);

        // Add event listeners
        $('#lore-weaver-manual-load').on('click', onManualLoadClick);
        $('#lore-weaver-before-send').on('change', function () {
            const settings = getSettings();
            settings.loadBeforeSend = $(this).is(':checked');
            setSettings(settings); // No need to await
        });
    }

    // Main execution flow for the client
    $(document).ready(function () {
        // Load default settings if none exist
        if (!extension_settings[extensionName]) {
            extension_settings[extensionName] = { ...DEFAULT_SETTINGS };
        }

        addExtensionUI();
        onSettingsChange();
    });
})();

// Utility functions and constants to be shared with client-side code
// NOTE: I tried to make the files separate but SillyTavern's module system can be tricky.
// This is a common pattern to keep server and client code in one file.
// For a production plugin, you'd split these into shared modules.

const _extensionName = "lore-weaver";
const _extensionFolderPath = `extensions/${_extensionName}`;

function _log(...args) { console.log(`[${_extensionName}]`, ...args); }
function _warn(...args) { console.warn(`[${_extensionName}]`, ...args); }
function _error(...args) { console.error(`[${_extensionName}]`, ...args); }

function _getSettings() {
    return extension_settings[_extensionName];
}

function _setSettings(settings) {
    extension_settings[_extensionName] = settings;
    saveSettings();
}

async function _callApi(path, method, body) {
    const url = `${getApiUrl()}/extensions/${_extensionName}${path}`;
    return fetch(url, {
        method: method,
        headers: { 'Content-Type': 'application/json' },
        body: body ? JSON.stringify(body) : undefined,
    });
}

function _displayStatus(message, type) {
    const statusEl = $('#lore-weaver-status');
    statusEl.text(message).removeClass('error success loading').addClass(type);
}

// Exporting for server-side usage
export const extensionName = _extensionName;
export const extensionFolderPath = _extensionFolderPath;
export const log = _log;
export const warn = _warn;
export const error = _error;
export const getSettings = _getSettings;
export const setSettings = _setSettings;
export const callApi = _callApi;
export const displayStatus = _displayStatus;
